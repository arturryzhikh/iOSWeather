//
//  HomeViewController.swift
//  iOSWeather
//
//  Created by Artur Ryzhikh on 14.01.2022.
//  Copyright (c) 2022 Artur Ryzhikh. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import SnapKit

protocol HomeDisplayLogic: AnyObject {
    func displayWeather(_ viewModel: Home.ViewModels.ViewModel)
    func displayError(message: String)
}

final class HomeViewController: UIViewController, HomeDisplayLogic {
    //MARK: Subviews
    var collectionView: UICollectionView!  {
        return (self.view as! WeatherView).collectionView
    }
    
    private var weatherView: WeatherView! {
        return (self.view as! WeatherView)
    }
    
    private lazy var activity: UIActivityIndicatorView = {
        view.insertSubview($0, aboveSubview: collectionView)
        $0.color = .white
        $0.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(32)
            make.trailing.equalTo(view.safeAreaLayoutGuide.snp.trailing).offset(-32)
        }
        return $0
    }(UIActivityIndicatorView())
    
    //MARK: Other Properties
    private let locationManager: CLLocationManager = CLLocationManager()
    private var homeViewModel = Home.ViewModels.ViewModel()
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        
    }
    //MARK: Get Weather
    private func getWeather(for location: CLLocation) {
        activity.startAnimating()
        let coord = Coord(lat: "\(location.coordinate.latitude)",
                          lon: "\(location.coordinate.longitude)")
        interactor?.getWeather(for: coord)
    }
    
    func getCityForecast() {
        activity.startAnimating()
        interactor?.getPlaceForecast()
    }
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let router = HomeRouter()
        let presenter = HomePresenter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        self.view = WeatherView(collectionDelegate: self,
                                collectionDataSource: self,
                                tabBarDelegate: router)
        
        setupLocationManager()
    }
    
    private func setupLocationManager() {
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        
    }
    
    //MARK: HomeDisplayLogic
    func displayWeather(_ viewModel: Home.ViewModels.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else {
                return
            }
            self.homeViewModel = viewModel
            self.collectionView.reloadData()
            self.weatherView.generateGradient()
            self.activity.stopAnimating()
        }
        
    }
    
    func displayError(message: String) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else {
                return
            }
            self.router?.showAlert(message: message)
            self.activity.stopAnimating()
        }
    }
    //MARK: View Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        locationManager.startUpdatingLocation()
    }
    
    
}

//MARK: UICollectionViewDataSource
extension HomeViewController: UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return homeViewModel.numberOfSections
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        homeViewModel.numberOfItemsIn(section)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let section = Home.ViewModels.ViewModel.Section(rawValue: indexPath.section)
        
        switch section {
            
        case .daily:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DailyCell.description(), for: indexPath) as! DailyCell
            cell.viewModel = homeViewModel.dailySectionVM.item(at: indexPath.item)
            return cell
            
        case .today:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TodayCell.description(), for: indexPath) as! TodayCell
            cell.viewModel = homeViewModel.todaySectionVM.item(at: indexPath.item)
            return cell
            
        case .detail:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: DetailCell.description(), for: indexPath) as! DetailCell
            let vm = homeViewModel.detailSectionVM.item(at: indexPath.item)
            cell.viewModel = vm
            return cell
            
        default:
            assert(false)
            
        }
        
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        switch kind {
            
        case UICollectionView.elementKindSectionHeader :
            guard let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: CurrentHeader.description(), for: indexPath) as? CurrentHeader else {
                fatalError("No appropriate view for supplementary view of \(kind) at \(indexPath)")
            }
            let vm = homeViewModel.currentHourlySectionVM.headerViewModel
            header.viewModel = vm
            return header
            
        case UICollectionView.elementKindSectionFooter :
            guard let footer = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: HourlyFooter.description(), for: indexPath) as? HourlyFooter else {
                fatalError("No appropriate view for supplementary view of \(kind) at \(indexPath)")
            }
            let vm = homeViewModel.currentHourlySectionVM.footerViewModel
            footer.viewModel = vm
            return footer
            
        default:
            assert(false)
        }
    }
}


//MARK: UICollectionViewDelegateFlowLayout
extension HomeViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        Screen.Home.sizeForItemAtSection(indexPath.section)
        
    }
    
    //header size
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        referenceSizeForHeaderInSection section: Int) -> CGSize {
        Screen.Home.referenceSizeForHeaderInSection(section: section)
    }
    //footer size
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        referenceSizeForFooterInSection section: Int) -> CGSize {
        Screen.Home.referenceSizeForFooterInSection(section: section)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        Screen.Home.minimumLineSpacingForSectionAt(section)
    }
    
}

extension HomeViewController: CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.first else { return }
        locationManager.stopUpdatingLocation()
        getWeather(for: location)
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print(error)
        
    }
    
    func locationManager(_ manager: CLLocationManager,
                         didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
    case .restricted, .denied:
        router?.showAlert(message: "In order to get weather forecast for your location , use searching or allow the app to get your location data in settings")
        locationManager.stopUpdatingLocation()
        break
        
    case .authorizedWhenInUse:
        locationManager.startUpdatingLocation()
        break
            
    case .authorizedAlways:
        locationManager.startUpdatingLocation()
        break
            
    case .notDetermined:
        break
            
    @unknown default:
        break
        
        }
    }
}
